{"meta":{"title":"FE炼金术研究所","subtitle":null,"description":"Forever Learner | Junior Programmer | Amateur Translator","author":"Tumao","url":"http://castermao.com"},"pages":[{"title":"","date":"2017-09-20T04:19:39.476Z","updated":"2017-09-20T04:19:39.476Z","comments":true,"path":"404.html","permalink":"http://castermao.com/404.html","excerpt":"","text":"Nothing here my dear :( Anyway, have a good day!"},{"title":"","date":"2018-01-31T01:07:17.826Z","updated":"2018-01-31T01:07:17.826Z","comments":true,"path":"about/index.html","permalink":"http://castermao.com/about/index.html","excerpt":"","text":"We are all in the gutter,but some of us are looking at the stars."}],"posts":[{"title":"5分钟看完<Head First HTML与CSS>","slug":"HTML与CSS","date":"2018-02-23T02:28:38.000Z","updated":"2018-02-23T04:01:52.991Z","comments":true,"path":"2018/02/23/HTML与CSS/","link":"","permalink":"http://castermao.com/2018/02/23/HTML与CSS/","excerpt":"","text":"很久前就看过Head First HTML with CSS &amp; XHTML，不过05版那时还是HTML4.01的天下，许多知识点现在看来有些过时，于是趁着春节假期，迅速把12版粗略过了一遍。以下是我阅读过程中记录的一些重点，算是读书笔记： 超链接文件跳转，向下索引，直接’文件名/example.html’，向上则’../example’。同时，无论何种操作系统，每上一层就多打一次..，并用/隔开。 可以直接链接带id的元素，做到本页面内跳转。具体应用示例：回到顶部功能，即给网页上方赋予一个id，并在下方插入&lt;a&gt;，链接到上方的id。 一个经验：浏览器宽度一般设置为800-1280像素间，同时logo宽度在100-200像素间。 指定字体推荐方法： 选择一个关键字（推荐small/medium），指定为body中字体大小。 使用em或百分数，相对于body字体大小指定其他元素字体大小。 颜色不管十六进制还是rgb，都是红、绿、蓝的顺序。其中，16进制转换rgb的计算方法：先列出所有可能涉及到的数：0 1 2 3 4 5 6 7 8 9 A B C D E F它们分别代表0-16，举个栗子，即A为10，B为11。以CD为例，它分别代表12与13，我们将12*16得出192，再加上13，即205 若使用删除线装饰，别用text-decoration的line-through属性，最好选择HTML提供的标签。 利用媒体查询，即media添加断点，进行响应式web设计。 border简写的顺序可按自身喜好进行（背景设置与其同理）。 CSS选择器分值计算：0 0 0这个三位数，百位：每包含一个id加1分，十位：每包含一个class或伪类加1分，个位：每包含一个元素名加1分 内联（inline）元素的外边距不会折叠，而是会相加。而块元素（block）会折叠。同时，只要两个垂直外边距碰到一起就会折叠，即使是一个元素嵌套在另一个元素中也不例外。当然，只要有边框，就不能避免。 使用float时，段落会从正常的流中删除，所以其他block元素会当它不存在般填充，可inline元素会围绕它。 与float不同，使用绝对定位（positon：absolute）时，连inline元素都会忽略它。 使用clear可消除float内容。 可利用CSS进行table布局，分别将display改为table, table-row, table-cell即可。 HTML插入表格，想要让单元格跨多行，可使用rowspan属性来指定，如rowspan = ‘2’。跨多列是colspan。 去除或修改list前的点，可修改list-style-type属性（如disc, circle, square等），也可自行栓剂使用定制版，即使用list-style-image，方法同上。 这篇文章也算是标题党了一回，毕竟记录的都是我个人觉得有启发的部分。最近总觉得CSS的学习不得章法，记过就忘。假期不知不觉也结束了，有些焦虑。希望接下来能有所进步吧。","categories":[],"tags":[{"name":"note","slug":"note","permalink":"http://castermao.com/tags/note/"}]},{"title":"不可不知的CSS选择符","slug":"不可不知的CSS选择器","date":"2018-01-30T11:41:19.000Z","updated":"2018-01-31T01:06:33.178Z","comments":true,"path":"2018/01/30/不可不知的CSS选择器/","link":"","permalink":"http://castermao.com/2018/01/30/不可不知的CSS选择器/","excerpt":"","text":"CSS选择符，英文名CSS selectors，顾名思义，用于选择需要添加样式的元素。 一般来说，最常见也最容易理解是 标签选择符123p &#123; color: green;&#125; 如果多个标签都想取得一样的效果，只需把它们挤一起就行，但是 千万记住要在它们当中加逗号分隔。如：123p, h1 &#123; color: green;&#125; 除此以外，选择特定元素的选择符基础款又分四种： 上下文选择符 id和class选择符 属性选择符 伪类 下面就来给大家介绍介绍ww 上下文选择符上下文选择符有些地方有点绕，接下来，为了方便更直接理解，我们先码一个HTML示例12345678&lt;body&gt; &lt;article&gt; &lt;h1&gt;笑声集锦&lt;/h1&gt; &lt;p&gt;嘻嘻嘻，&lt;strong&gt;大白天&lt;/strong&gt;我笑嘻嘻&lt;/p&gt; &lt;p&gt;哈哈哈，&lt;em&gt;大晚上&lt;/em&gt;我笑哈哈&lt;/p&gt; &lt;p&gt;呵呵呵，&lt;span&gt;无论&lt;strong&gt;白天&lt;/strong&gt;或夜晚&lt;/span&gt;，风雨无阻笑呵呵&lt;/p&gt; &lt;/article&gt;&lt;/body&gt; 它的文档模型（DOM）如下：在浏览器里打开是这样的： * 123* &#123; color: green;&#125; 首先就是*啦，它算是比较特殊的上下文选择符，因为：它能够选中页面中的所有元素像是示例中的所有文本，都将在它的作用下变为绿色，成为这样：当然，它还可以搭配别的选择符，成为子选择符，或孙选择符。举个栗子： 123p * &#123; color: green;&#125; 这就可以匹配&lt;p&gt;中的所有后代元素 123p * em &#123; color: green;&#125; 而这会将&lt;p&gt;中的每一个&lt;em&gt;都选中 a b 123p strong &#123; color: green;&#125; 这就是大名鼎鼎的后代选择符，以空格作为分隔。示例中的代码，会将&lt;p&gt;中所有&lt;strong&gt;内文本变为绿色。 a &gt; b 123p &gt; strong &#123; color: green;&#125; 相信大家也发现了，与上面的后代选择符不同，加了&gt;的子选择符更加严格，只会选择直系子元素，因此，包围在&lt;span&gt;内的&lt;strong&gt;就失去了变绿的机会。 a + b 123h1 + p &#123; color: green;&#125; 这叫做相邻选择符，它会选中紧挨在a元素后的一个b元素，因此，示例中只有第一段变绿。如果想要相邻的所有b元素都变绿，将+号替换为~即可。 id和class选择符这应该是除标签选择符外最好理解，也用的最广泛的选择符了。规则很简单，在id前加#，在class前加.，其代码分别如下： id123#xixi &#123; color: green;&#125; 如此一来，所有id为xixi的元素都会被选中，文本变为绿色。 class123.xixi &#123; color: green;&#125; 同上，操作后所有class为xixi的元素文本会变为绿色。 至于什么时候用id，什么时候用class，要怎样区别并杜绝滥用，等以后有机会再来探讨。 属性选择符作为初学者，这部分自己用得不多，就简单举两个吧。 A[title]123img[title] &#123; border: 1px black solid;&#125; 这会将所有拥有title属性的图片加上边框 A[title=’sth’]123img[title='xixi'] &#123; border: 1px black solid;&#125; 这回就只会将标题名为xixi的图片加上边框了ww 伪类到现在为止，我们讲过的选择符都是针对某个静止的部分，那如果我们想在某些事件发生后，例如点击后，再改变元素的样式呢？当当当当，伪类登场。我们选取两个典型来展开：visited：用户已点击过链接hover：鼠标指针正悬停在链接上在使用伪类时，我们要在其前加上冒号(:)，这样一来，就能非常轻松地区分真物与伪物。 visited123a:visited &#123; color: green;&#125; 这样设置过后，每个被点击过的链接都会变为绿色。 hover123a:hover &#123; color: green;&#125; 经此操作，每当你将鼠标移到链接上时，它都将变为绿色。移开后，又会恢复原状。 最后的bonus A:nth-of-type(n) 123ol:nth-of-type(2) &#123; color: green&#125; A:nth-last-of-type(n) 123ol:nth-last-of-type(2) &#123; color: green;&#125; 这两个的具体用法大家可以自己查查看，也能进一步加深印象。 还有好多好多选择符没介绍，时nai间xin有限，只列出了自己觉得最常用的部分，作为自身学习的一个总结。当然，如果还能对大家有所帮助就更好了ww","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://castermao.com/tags/CSS/"}]},{"title":"一鸡两吃，一题两解","slug":"一鸡两吃，一题两解","date":"2018-01-27T09:28:42.000Z","updated":"2018-01-27T11:43:53.482Z","comments":true,"path":"2018/01/27/一鸡两吃，一题两解/","link":"","permalink":"http://castermao.com/2018/01/27/一鸡两吃，一题两解/","excerpt":"","text":"很久很久以前，曾在知乎看过这样一个问题：为什么做数学题时，自己想不出来，而翻到后面看答案解析时却全都能能看懂？其中的一个高赞答主提到说： 数学学习最重要的是熟练 双向推导思维 的训练，即 正向推导思维和逆向推导思维双管齐下。 这意味着，我们不仅可以顺向思维，根据已知条件，求出结果。也可以从问题入手，逆向操作一把，一步步倒推，得出要怎样的条件才能得到它。而这两者路径重合的瞬间，问题也迎刃而解。同时，除了这种最极端的正反思考法，根据所抓的问题重点，也会出现不一样的解法。 最近在学习CS61A，homework1里有一题：求一个大于1的任意整数n除自身外的最大因数。题目本身并不难，我的想法是分两步解决： 列出n除自身外所有的因数 进行比较，返回其中最大的数 其中，针对第1点如何求所有因数的方法，我的解法是： 列出从1到n-1的所有数 用n分别去除以上一步中的数，若余数为0，则其是n的因数 针对第2点，返回因数中的最大值，我的想法是： 选择1作为参照系，与接下来的因数比较 若没有比它更大的数，则返回它 若有，则替换掉它，成为新的参照系，继续比下去 理清思绪后，我的代码如下：1234567def largest_factor(n): largest = 1 for i in range(1, n): if n % i == 0: if i &gt; largest: largest = i return largest 今天solution发布，我又去看了官方列出的参考解法，发现与我是完全不同的思路，其代码如下：123456def largest_factor(n): factor = n - 1 while factor &gt; 0: if n % factor == 0: return factor factor -= 1 我的下手点是因数，而这种解法的下手点是最大。即我是先找出所有因数，再找最大的那个。而这解法是找出最大的数，再判断此数是否是n的因数。我是从1开始往后试，它是从n-1开始往前试。按我现在的水平，也说不准哪一种效率更高。但照题目要求，若将程序替换成人工运行，它比我的解法更优。这也算是一个小启发。 每个问题可能都有许多种解法。当然，初学者纠结效率和优化还为时过早，但希望自己能博取众长，在越来越熟的基础上越来越快。","categories":[],"tags":[{"name":"CS61A","slug":"CS61A","permalink":"http://castermao.com/tags/CS61A/"}]},{"title":"CS61A开坑纪念","slug":"CS61A开坑纪念","date":"2018-01-26T03:18:15.000Z","updated":"2018-01-27T09:28:39.298Z","comments":true,"path":"2018/01/26/CS61A开坑纪念/","link":"","permalink":"http://castermao.com/2018/01/26/CS61A开坑纪念/","excerpt":"","text":"很久之前就听闻过伯克利这门课，是把鼎鼎大名的SICP内核精神用Python重制的大作。最近刚好有些时间，又恰逢开课，赶紧激动万分地跳坑。 先来看看 课程主页 ，非常清晰，所有资源，从视频到代码，再到补充阅读资料，一应俱全。每周一三五会放出教学视频，学有余力的话，可以先提前把阅读材料读一读，当作预习。 这样看视频时能更快更深理解。当然，如果时间紧张，专攻视频也没太大问题。同时，Youtube也有倍速和自动生成字幕功能，方便根据自身情况随时调节。课上用的所有PPT也会上传，这样就不用纠结笔记，时不时暂停，可以更加专心听讲。lab与homework最好都做一做。毕竟动手练习才是最好的巩固方法。 目前week1作业的ddl刚结束，昨晚赶忙补完上传。其中，着实被Q4的问题困扰了很久。它是这样的： Q4: If Function vs StatementLet’s write a function that does the same thing as an if statement. 123456789101112131415161718def if_function(condition, true_result, false_result):\"\"\"Return true_result if condition is a true value, andfalse_result otherwise.&gt;&gt;&gt; if_function(True, 2, 3)2&gt;&gt;&gt; if_function(False, 2, 3)3&gt;&gt;&gt; if_function(3==2, 3+2, 3-2)1&gt;&gt;&gt; if_function(3&gt;2, 3+2, 3-2)5\"\"\"if condition: return true_resultelse: return false_result Despite the doctests above, this function actually does not do the same thing as an if statement in all cases. To prove this fact, write functions c, t, and f such that with_if_statement returns the number 1, but with_if_function does not (it can do anything else): 12345678910111213141516171819202122def with_if_statement(): \"\"\" &gt;&gt;&gt; with_if_statement() 1 \"\"\" if c(): return t() else: return f()def with_if_function(): return if_function(c(), t(), f())def c(): \" YOUR CODE HERE \"def t(): \" YOUR CODE HERE \"def f(): \" YOUR CODE HERE \" if-function与if-statement究竟有何区别？我当时的理解是，statament的执行遵循由前到后的顺序，只有前方运行完，才会轮到下一条支线。而function做参数时，是一次性全部同时加载完全。官方solution最终也验证了我的想法。参考答案如下：12345678def c(): return Falsedef t(): 1/0def f(): return 1 if-statement会按顺序走下去，那调用c得出是False后，会直接调用else后的f，不给t发挥机会。而if-function将参数一气加载完，会因为t直接报错。两者输出的值自然就不同了。","categories":[],"tags":[{"name":"CS61A","slug":"CS61A","permalink":"http://castermao.com/tags/CS61A/"}]},{"title":"三分钟教你学会Markdown","slug":"三分钟教你学会Markdown","date":"2018-01-25T07:10:16.000Z","updated":"2018-01-25T12:34:21.492Z","comments":true,"path":"2018/01/25/三分钟教你学会Markdown/","link":"","permalink":"http://castermao.com/2018/01/25/三分钟教你学会Markdown/","excerpt":"","text":"为什么选择markdown？这个问题随手百度或知乎就可得到一大堆相关解答，也就不再赘述。下面讲讲最常用的几个markdown语法： 标题对熟悉HTML的人来讲，各级标题的使用必然不陌生。即使不熟悉也没关系，这就和写作时分小标题来使文章更有条理是一个道理。操作很简单，在标题前加 # 即可。分别对应HTML中的h1到h6，越往下字越小，重要性越次之。一般前三个用得最多，大家可以自己试一试效果，操作如下：123456# 老大## 老二### 老三#### 老四##### 老五###### 老六 列表既然提到要使文章更加有逻辑，列表自然不可少。列表又分有序与无序两种，分别对应HTML中的ol, ul顾名思义，有序列表前带数字编号，而无序列表前大多是小圆点。操作如下：无序（以下的*号也可替换成+或-）：123* cats* dogs* rabbits 效果如下： cats dogs rabbits 有序：1231. 土豆2. 番茄3. 茄子 效果如下： 土豆 番茄 茄子 引用对应HTML中的blockquote操作如下：1234&gt; 红红火火恍恍惚惚&gt; 嘻嘻哈哈呵呵&gt; 银铃般的笑声 也可以简单点写成：1234&gt; 红红火火恍恍惚惚嘻嘻哈哈呵呵&gt; 银铃般的笑声 效果如下： 红红火火恍恍惚惚嘻嘻哈哈呵呵 银铃般的笑声 代码引用如果需要引用代码，只需用3个`号将代码上下包起来即可：如需要相关代码高亮，只需在第一行3个`号后面加上你所用的语言名称，如JavaScript（注：若只有单行代码，可以直接用一个`号上下包起来） 效果如下：123var add = function(a, b) &#123; return a + b&#125; 插入链接我们用人见人爱的百度来举例：[]里填写想显示出的文字，()里填链接操作如下：1[百度](https://www.baidu.com/) 效果如下：百度 插入图片学会了插入链接，插入图片就so easy啦只需在[]前加上!就可以操作如下：1![](https://i.imgflip.com/19dwu7.jpg) 效果如下： 加粗/斜体操作如下：12*这里所说的话会斜体***这里所说的话会加粗** 效果如下：这里所说的话会斜体这里所说的话会加粗 分割线分割线可以用不止一种方法来达到效果，这里就选个我最喜欢的为例来讲一讲操作如下：123***bibobibobibobi*** 效果如下： bibobibobibobi 删除线操作如下：1~~把我删除吧~~ 效果如下：把我删除吧 下划线下划线暂时没有直接的markdown方法，但可以通过HTML和行内CSS来解决这方法好处多多，各种样式及大小，例如是要黑色还是红色，实线还是虚线，都可以自己通过CSS调具体如下：1&lt;span style=&apos;border-bottom: 2px solid white;&apos;&gt;走过路过，加个下划线吧大哥大姐&lt;/span&gt; 效果如下：走过路过，加个下划线吧 就先介绍到这里，还有些常用的功能，像是表格啊之类没提到，小伙伴们如有需要就自行搜索吧w","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://castermao.com/tags/markdown/"}]}]}